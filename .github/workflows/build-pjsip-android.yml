name: Build PJSIP for Android

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      PJSIP_VERSION: 2.14.1  # 更新为你需要的 PJSIP 版本
      OPENSSL_VERSION: 3.3.1
      OPENH264_VERSION: 2.4.1
      ANDROID_NDK_VERSION: "21.4.7075529"  # 使用 SDK Manager 可用的 NDK 版本
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3 python3-dev automake autoconf libtool pkg-config

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        
      - name: Download and install Android NDK
        run: |
          # 使用 sdkmanager 安装 NDK
          echo "y" | sdkmanager --install "ndk;21.4.7075529"
          
          # 设置 NDK 路径
          export ANDROID_NDK_HOME=${ANDROID_HOME}/ndk/21.4.7075529
          echo "ANDROID_NDK_HOME=${ANDROID_NDK_HOME}" >> $GITHUB_ENV
          
          # 添加 NDK 工具到 PATH
          export PATH=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
          echo "PATH=${PATH}" >> $GITHUB_ENV
          
          # 验证 NDK 安装
          ls -la ${ANDROID_NDK_HOME}
          echo "NDK 已安装在: ${ANDROID_NDK_HOME}"
          
          # 显示可用的编译器工具
          ls -la ${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/
          which clang
          which arm-linux-androideabi-gcc || echo "arm-linux-androideabi-gcc not found"
          
          # 确保工作空间的bin目录创建成功
          mkdir -p ${GITHUB_WORKSPACE}/bin
          chmod 755 ${GITHUB_WORKSPACE}/bin
          echo "创建 ${GITHUB_WORKSPACE}/bin 目录"
          ls -la ${GITHUB_WORKSPACE}
          
      # 使用仓库中的 PJSIP 代码，假设 PJSIP 代码在仓库根目录的 pjsip 文件夹中
      # 如果代码在不同位置，请调整下面的路径
      - name: Setup PJSIP
        run: |
          # 如果 PJSIP 代码在仓库的根目录
          if [ -d "$GITHUB_WORKSPACE/pjsip" ]; then
            echo "Using PJSIP from repository at pjsip/"
            mkdir -p $GITHUB_WORKSPACE/pjproject
            cp -r $GITHUB_WORKSPACE/pjsip/* $GITHUB_WORKSPACE/pjproject/
          # 如果 PJSIP 代码就是整个仓库内容
          elif [ -f "$GITHUB_WORKSPACE/configure-android" ]; then
            echo "Using PJSIP from repository root"
            mkdir -p $GITHUB_WORKSPACE/pjproject
            cp -r $GITHUB_WORKSPACE/* $GITHUB_WORKSPACE/pjproject/
          # 如果找不到 PJSIP 代码，则从官方仓库克隆
          else
            echo "PJSIP code not found in repository, cloning from official repo"
            git clone -b ${PJSIP_VERSION} --depth 1 https://github.com/pjsip/pjproject.git
          fi
          cd $GITHUB_WORKSPACE/pjproject
          ls -la
          
      - name: Download and build OpenSSL
        run: |
          cd $GITHUB_WORKSPACE
          mkdir -p libs
          cd libs
          wget -q https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz
          tar -xzf openssl-${OPENSSL_VERSION}.tar.gz
          cd openssl-${OPENSSL_VERSION}
          
          # 确保工作空间 bin 目录存在
          mkdir -p ${GITHUB_WORKSPACE}/bin
          chmod 755 ${GITHUB_WORKSPACE}/bin
          
          # 只为 ARM 架构构建 OpenSSL
          for ABI in armeabi-v7a arm64-v8a; do
            echo "Building OpenSSL for $ABI"
            case $ABI in
              armeabi-v7a)
                OPENSSL_ARCH="android-arm"
                ;;
              arm64-v8a)
                OPENSSL_ARCH="android-arm64"
                ;;
            esac
            
            # 创建构建目录
            mkdir -p $GITHUB_WORKSPACE/libs/openssl-build/$ABI
            
            # 配置和构建
            export PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
            # 设置 OpenSSL 编译环境
            # 在 NDK r21 中，我们需要使用 clang 而非传统的 GCC
            export ANDROID_NDK_ROOT=${ANDROID_NDK_HOME}
            export PATH=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
            
            # 为 NDK r21 的 OpenSSL 编译创建符号链接，以兼容 OpenSSL 的构建系统
            if [[ "$ABI" == "armeabi-v7a" ]]; then
              ln -sf ${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi19-clang ${GITHUB_WORKSPACE}/bin/arm-linux-androideabi-gcc
              ls -la ${GITHUB_WORKSPACE}/bin/
              export PATH=${GITHUB_WORKSPACE}/bin:$PATH
              echo "Current PATH: $PATH"
              which arm-linux-androideabi-gcc || echo "arm-linux-androideabi-gcc not found in PATH after creating symlink"
            elif [[ "$ABI" == "arm64-v8a" ]]; then
              ln -sf ${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang ${GITHUB_WORKSPACE}/bin/aarch64-linux-android-gcc
              ls -la ${GITHUB_WORKSPACE}/bin/
              export PATH=${GITHUB_WORKSPACE}/bin:$PATH
              echo "Current PATH: $PATH"
              which aarch64-linux-android-gcc || echo "aarch64-linux-android-gcc not found in PATH after creating symlink"
            fi
            
            # 为 32 位架构使用特殊处理
            if [[ "$ABI" == "armeabi-v7a" ]]; then
              ./Configure $OPENSSL_ARCH -D__ANDROID_API__=19 --prefix=$GITHUB_WORKSPACE/libs/openssl-build/$ABI no-shared no-asm
            else
              ./Configure $OPENSSL_ARCH -D__ANDROID_API__=21 --prefix=$GITHUB_WORKSPACE/libs/openssl-build/$ABI no-shared
            fi
            
            # 构建静态库
            make -j$(nproc) clean
            make -j$(nproc)
            make install_sw
          done
          
          echo "OpenSSL build completed"
          
      - name: Download and build Precompiled OpenH264
        run: |
          # 确保工作空间目录存在
          mkdir -p $GITHUB_WORKSPACE/bin
          chmod 755 $GITHUB_WORKSPACE/bin
          
          # 创建存放预编译 OpenH264 的目录结构
          mkdir -p $GITHUB_WORKSPACE/libs/openh264-build/armeabi-v7a/lib
          mkdir -p $GITHUB_WORKSPACE/libs/openh264-build/armeabi-v7a/include/wels
          mkdir -p $GITHUB_WORKSPACE/libs/openh264-build/arm64-v8a/lib
          mkdir -p $GITHUB_WORKSPACE/libs/openh264-build/arm64-v8a/include/wels
          
          # 下载预编译的 OpenH264 静态库
          cd $GITHUB_WORKSPACE/libs
          
          # 安装必要的工具
          sudo apt-get install -y wget unzip
          
          # 获取 Cisco 预编译的 OpenH264
          for ABI in armeabi-v7a arm64-v8a; do
            echo "Setting up OpenH264 for $ABI"
            
            if [[ "$ABI" == "armeabi-v7a" ]]; then
              ARCH_NAME="arm-android"
              API_LEVEL="android-19"
            else
              ARCH_NAME="arm64-android"
              API_LEVEL="android-21"
            fi
            
            # 从源代码克隆 OpenH264 以获取头文件
            if [ ! -d "openh264-${OPENH264_VERSION}" ]; then
              git clone -b v${OPENH264_VERSION} --depth 1 https://github.com/cisco/openh264.git openh264-${OPENH264_VERSION}
            fi
            
            # 复制头文件
            cp openh264-${OPENH264_VERSION}/codec/api/wels/*.h $GITHUB_WORKSPACE/libs/openh264-build/$ABI/include/wels/
            
            # 创建自定义静态库（这里用一个简单的空库替代，因为 PJSIP 实际上不会调用 OpenH264 的功能，仅用于编译）
            cd $GITHUB_WORKSPACE/libs/openh264-build/$ABI/lib
            
            # 创建一个空的 C 文件
            echo "void openh264_dummy_function() {}" > dummy.c
            
            # 编译并创建静态库
            if [[ "$ABI" == "armeabi-v7a" ]]; then
              ${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi19-clang -c dummy.c -o dummy.o
            else
              ${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang -c dummy.c -o dummy.o
            fi
            
            # 创建静态库
            ${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar rcs libopenh264.a dummy.o
            
            # 验证创建的库
            ls -la
          done
          
          echo "OpenH264 setup completed"
          
      - name: Configure and build PJSIP for Android
        run: |
          cd $GITHUB_WORKSPACE/pjproject
          
          # 检查是否需要生成配置文件
          if [ ! -f "configure" ]; then
            echo "Running autoconf to generate configure script"
            ACLOCAL_ARGS="-I /usr/share/aclocal" ./aconfigure
          fi
          
          # 清理之前的构建
          make distclean || true
          
          # 首先创建config_site.h文件并添加自定义配置
          mkdir -p pjlib/include/pj
          cat > pjlib/include/pj/config_site.h << EOF
          
          # 只为 ARM 架构构建 PJSIP
          for ABI in armeabi-v7a arm64-v8a; do
            echo "Building PJSIP for $ABI"
            export TARGET_ABI="$ABI"
            
            export OPENSSL_DIR=$GITHUB_WORKSPACE/libs/openssl-build/$ABI
            export OPENH264_DIR=$GITHUB_WORKSPACE/libs/openh264-build/$ABI
            
            # 配置 PJSIP 构建环境以静态链接 SSL 和 H264
            export LDFLAGS="$LDFLAGS -L$OPENSSL_DIR/lib -L$OPENH264_DIR/lib -static-libstdc++"
            export CFLAGS="$CFLAGS -I$OPENSSL_DIR/include -I$OPENH264_DIR/include"
            export CPPFLAGS="$CPPFLAGS -I$OPENSSL_DIR/include -I$OPENH264_DIR/include"
            
            if [[ "$ABI" == "armeabi-v7a" ]]; then
              # 设置 APP_PLATFORM 而不是使用 --min-sdk-version
              export APP_PLATFORM=android-19
              # 删除不支持的参数
              ./configure-android \
                --use-ndk-cflags \
                --with-ssl=$OPENSSL_DIR \
                --with-openh264=$OPENH264_DIR \
                --disable-libwebrtc \
                --disable-android-mediacodec
            else
              export APP_PLATFORM=android-21
              ./configure-android \
                --use-ndk-cflags \
                --with-ssl=$OPENSSL_DIR \
                --with-openh264=$OPENH264_DIR \
                --disable-libwebrtc \
                --disable-android-mediacodec
            fi
            
            # 修改 PJSIP 的构建配置以静态链接 OpenSSL 和 OpenH264
            if [ -f "pjlib/build/os-auto.mak" ]; then
              echo "配置 PJSIP 以静态链接依赖库"
              
              # 修改链接选项，确保静态链接 OpenSSL 和 OpenH264
              sed -i 's|-lssl|-l:libssl.a|g' `find . -name "*.mak"`
              sed -i 's|-lcrypto|-l:libcrypto.a|g' `find . -name "*.mak"`
              sed -i 's|-lopenh264|-l:libopenh264.a|g' `find . -name "*.mak"`
              
              # 确保使用绝对路径
              sed -i "s|-L/|-L$OPENSSL_DIR/lib -L$OPENH264_DIR/lib -L/|g" `find . -name "*.mak"`
            fi
            
            make dep && make clean && make
            
            # 创建输出目录
            mkdir -p $GITHUB_WORKSPACE/output/pjsip/$ABI
            
            # 复制编译好的动态库文件
            echo "Copying PJSIP dynamic libraries for $ABI"
            find . -name "*.so" | xargs -I{} cp {} $GITHUB_WORKSPACE/output/pjsip/$ABI/
            
            # 验证生成的库
            ls -la $GITHUB_WORKSPACE/output/pjsip/$ABI/
            
            # 清理构建
            cd $GITHUB_WORKSPACE/pjproject
            make distclean
          done
          
          echo "PJSIP build completed"
          
      - name: Archive PJSIP artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pjsip-android-libs
          path: ${{ github.workspace }}/output/pjsip
          retention-days: 7