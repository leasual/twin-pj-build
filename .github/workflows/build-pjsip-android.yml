name: Build PJSIP for Android

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      PJSIP_VERSION: 2.14.1  # 更新为你需要的 PJSIP 版本
      OPENSSL_VERSION: 3.3.1
      OPENH264_VERSION: 2.4.1
      ANDROID_NDK_VERSION: "21.4.7075529"  # 统一使用 NDK 21
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3 python3-dev automake autoconf libtool pkg-config yasm nasm
          
          # 安装 SWIG 4.0.2
          cd $GITHUB_WORKSPACE
          wget https://github.com/swig/swig/archive/refs/tags/v4.0.2.tar.gz
          tar -xzf v4.0.2.tar.gz
          cd swig-4.0.2
          
          # 安装SWIG的依赖项
          sudo apt-get install -y libpcre3-dev bison
          
          # 配置和构建SWIG
          ./autogen.sh
          ./configure
          make -j$(nproc)
          sudo make install
          
          # 检查SWIG版本
          swig -version

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        
      - name: Download and install Android NDK
        run: |
          # 安装 NDK 21
          echo "y" | sdkmanager --install "ndk;21.4.7075529"
          
          # 验证安装
          ls -la ${ANDROID_HOME}/ndk
          
          # 设置环境变量
          echo "ANDROID_NDK_HOME=${ANDROID_HOME}/ndk/21.4.7075529" >> $GITHUB_ENV
          
          # 添加 NDK 工具到 PATH
          export PATH=${ANDROID_HOME}/ndk/21.4.7075529/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
          echo "PATH=${PATH}" >> $GITHUB_ENV
          
          # 确保工作空间的bin目录创建成功
          mkdir -p ${GITHUB_WORKSPACE}/bin
          chmod 755 ${GITHUB_WORKSPACE}/bin
          echo "创建 ${GITHUB_WORKSPACE}/bin 目录"
          ls -la ${GITHUB_WORKSPACE}
          
          # 检查可用的编译器工具
          echo "可用的编译器工具:"
          ls -la ${ANDROID_HOME}/ndk/21.4.7075529/toolchains/llvm/prebuilt/linux-x86_64/bin/ | grep "arm"
          
      # 创建输出目录结构
      - name: Setup output directories
        run: |
          # 创建 OpenSSL 和 OpenH264 输出目录
          mkdir -p $GITHUB_WORKSPACE/output/openssl/armeabi-v7a/lib
          mkdir -p $GITHUB_WORKSPACE/output/openssl/armeabi-v7a/include
          mkdir -p $GITHUB_WORKSPACE/output/openssl/arm64-v8a/lib
          mkdir -p $GITHUB_WORKSPACE/output/openssl/arm64-v8a/include
          
          mkdir -p $GITHUB_WORKSPACE/output/openh264/armeabi-v7a/lib
          mkdir -p $GITHUB_WORKSPACE/output/openh264/armeabi-v7a/include
          mkdir -p $GITHUB_WORKSPACE/output/openh264/arm64-v8a/lib
          mkdir -p $GITHUB_WORKSPACE/output/openh264/arm64-v8a/include
          
          # 创建 PJSIP 输出目录
          mkdir -p $GITHUB_WORKSPACE/output/pjsip/armeabi-v7a
          mkdir -p $GITHUB_WORKSPACE/output/pjsip/arm64-v8a
          
          # 创建 PJSUA2 输出目录
          mkdir -p $GITHUB_WORKSPACE/output/pjsua2/jniLibs/armeabi-v7a
          mkdir -p $GITHUB_WORKSPACE/output/pjsua2/jniLibs/arm64-v8a
          mkdir -p $GITHUB_WORKSPACE/output/pjsua2/java/org/pjsip/pjsua2
          
      - name: Build and prepare OpenSSL
        run: |
          cd $GITHUB_WORKSPACE
          mkdir -p libs
          cd libs
          wget -q https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz
          tar -xzf openssl-${OPENSSL_VERSION}.tar.gz
          cd openssl-${OPENSSL_VERSION}
          
          # 确保工作空间 bin 目录存在
          mkdir -p ${GITHUB_WORKSPACE}/bin
          chmod 755 ${GITHUB_WORKSPACE}/bin
          
          # 为两种架构构建 OpenSSL
          for ABI in armeabi-v7a arm64-v8a; do
            echo "Building OpenSSL for $ABI"
            case $ABI in
              armeabi-v7a)
                OPENSSL_ARCH="android-arm"
                API_LEVEL=19
                ;;
              arm64-v8a)
                OPENSSL_ARCH="android-arm64"
                API_LEVEL=21
                ;;
            esac
            
            # 创建构建目录
            mkdir -p $GITHUB_WORKSPACE/libs/openssl-build/$ABI
            
            # 配置和构建
            export PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
            # 设置 OpenSSL 编译环境
            export ANDROID_NDK_ROOT=${ANDROID_NDK_HOME}
            
            # 为 NDK 21 的 OpenSSL 编译创建符号链接
            if [[ "$ABI" == "armeabi-v7a" ]]; then
              # 创建指向 armv7a-linux-androideabi19-clang 的符号链接
              ln -sf ${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi${API_LEVEL}-clang ${GITHUB_WORKSPACE}/bin/arm-linux-androideabi-gcc
              ls -la ${GITHUB_WORKSPACE}/bin/
              export PATH=${GITHUB_WORKSPACE}/bin:$PATH
              echo "Current PATH: $PATH"
              which arm-linux-androideabi-gcc || echo "arm-linux-androideabi-gcc not found in PATH after creating symlink"
            elif [[ "$ABI" == "arm64-v8a" ]]; then
              # 创建指向 aarch64-linux-android21-clang 的符号链接
              ln -sf ${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android${API_LEVEL}-clang ${GITHUB_WORKSPACE}/bin/aarch64-linux-android-gcc
              ls -la ${GITHUB_WORKSPACE}/bin/
              export PATH=${GITHUB_WORKSPACE}/bin:$PATH
              echo "Current PATH: $PATH"
              which aarch64-linux-android-gcc || echo "aarch64-linux-android-gcc not found in PATH after creating symlink"
            fi
            
            # 配置 OpenSSL
            ./Configure $OPENSSL_ARCH -D__ANDROID_API__=$API_LEVEL --prefix=$GITHUB_WORKSPACE/libs/openssl-build/$ABI no-shared
            
            # 构建静态库
            make -j$(nproc) clean
            make -j$(nproc)
            make install_sw
            
            # 将构建结果复制到输出目录
            cp -r $GITHUB_WORKSPACE/libs/openssl-build/$ABI/lib/* $GITHUB_WORKSPACE/output/openssl/$ABI/lib/
            cp -r $GITHUB_WORKSPACE/libs/openssl-build/$ABI/include/* $GITHUB_WORKSPACE/output/openssl/$ABI/include/
          done
          
          echo "OpenSSL build completed"
          
      - name: Build and prepare OpenH264
        run: |
            # 确保工作空间目录存在
            mkdir -p $GITHUB_WORKSPACE/bin
            chmod 755 $GITHUB_WORKSPACE/bin
            
            # 下载并构建OpenH264
            cd $GITHUB_WORKSPACE/libs
            
            # 安装必要的工具
            sudo apt-get install -y wget unzip yasm nasm
            
            # 克隆OpenH264源代码
            if [ ! -d "openh264-${OPENH264_VERSION}" ]; then
              git clone -b v${OPENH264_VERSION} --depth 1 https://github.com/cisco/openh264.git openh264-${OPENH264_VERSION}
            fi
            
            cd openh264-${OPENH264_VERSION}
            
            # 为每个架构构建OpenH264
            for ABI in armeabi-v7a arm64-v8a; do
              echo "Building OpenH264 for $ABI"
              
              # 设置构建目标目录
              INSTALL_DIR=$GITHUB_WORKSPACE/output/openh264/$ABI
              
              # 设置正确的构建参数
              if [[ "$ABI" == "armeabi-v7a" ]]; then
                ARCH=arm
                API_LEVEL=19
                TOOLCHAINPREFIX=arm-linux-androideabi
                NDKARCH=armv7a-linux-androideabi
              else
                ARCH=arm64
                API_LEVEL=21
                TOOLCHAINPREFIX=aarch64-linux-android
                NDKARCH=aarch64-linux-android
              fi
              
              # 设置环境变量
              export ARCH=$ARCH
              export OS=android
              export NDKROOT=${ANDROID_NDK_HOME}
              export TARGET=android-$API_LEVEL
              export NDKLEVEL=$API_LEVEL
              export NDK_TOOLCHAIN_VERSION=clang
              
              # 使用与安装相同的参数进行清理
              echo "执行: make clean OS=android ARCH=$ARCH TARGET=android-$API_LEVEL NDKROOT=$NDKROOT NDKLEVEL=$API_LEVEL NDK_TOOLCHAIN_VERSION=clang"
              make clean OS=android ARCH=$ARCH TARGET=android-$API_LEVEL NDKROOT=$NDKROOT NDKLEVEL=$API_LEVEL NDK_TOOLCHAIN_VERSION=clang
              
              # 直接使用make install命令构建和安装
              echo "执行: make install OS=android ARCH=$ARCH TARGET=android-$API_LEVEL NDKROOT=$NDKROOT NDKLEVEL=$API_LEVEL NDK_TOOLCHAIN_VERSION=clang PREFIX=$INSTALL_DIR"
              make install OS=android ARCH=$ARCH TARGET=android-$API_LEVEL NDKROOT=$NDKROOT NDKLEVEL=$API_LEVEL NDK_TOOLCHAIN_VERSION=clang PREFIX=$INSTALL_DIR -j$(nproc)
              
              # 检查安装结果
              echo "验证OpenH264安装结果:"
              find $INSTALL_DIR -type f | sort
              
              # 创建pkgconfig目录和文件(如果不存在)
              if [ ! -d "$INSTALL_DIR/lib/pkgconfig" ]; then
                mkdir -p $INSTALL_DIR/lib/pkgconfig
                
                echo "prefix=$INSTALL_DIR" > $INSTALL_DIR/lib/pkgconfig/openh264.pc
                echo "exec_prefix=\${prefix}" >> $INSTALL_DIR/lib/pkgconfig/openh264.pc
                echo "libdir=\${prefix}/lib" >> $INSTALL_DIR/lib/pkgconfig/openh264.pc
                echo "includedir=\${prefix}/include" >> $INSTALL_DIR/lib/pkgconfig/openh264.pc
                echo "" >> $INSTALL_DIR/lib/pkgconfig/openh264.pc
                echo "Name: OpenH264" >> $INSTALL_DIR/lib/pkgconfig/openh264.pc
                echo "Description: OpenH264 is a codec library which supports H.264 encoding and decoding" >> $INSTALL_DIR/lib/pkgconfig/openh264.pc
                echo "Version: ${OPENH264_VERSION}" >> $INSTALL_DIR/lib/pkgconfig/openh264.pc
                echo "Libs: -L\${libdir} -lopenh264" >> $INSTALL_DIR/lib/pkgconfig/openh264.pc
                echo "Cflags: -I\${includedir}" >> $INSTALL_DIR/lib/pkgconfig/openh264.pc
              fi
            done
            
            echo "OpenH264构建完成"
          
      - name: Checkout and build PJSIP
        run: |
          # 移除所有 .so 文件，只保留 .a 文件
          find $GITHUB_WORKSPACE/output/openssl -name "*.so" -delete
          find $GITHUB_WORKSPACE/output/openh264 -name "*.so" -delete
        
          # 确认只有静态库存在
          echo "确认 OpenSSL 目录中的库文件:"
          find $GITHUB_WORKSPACE/output/openssl -name "lib*.a" | sort
        
          echo "确认 OpenH264 目录中的库文件:"
          find $GITHUB_WORKSPACE/output/openh264 -name "lib*.a" | sort
          
          # 如果 PJSIP 代码在仓库的根目录
          if [ -d "$GITHUB_WORKSPACE/pjsip" ]; then
            echo "Using PJSIP from repository at pjsip/"
            mkdir -p $GITHUB_WORKSPACE/pjproject
            cp -r $GITHUB_WORKSPACE/pjsip/* $GITHUB_WORKSPACE/pjproject/
          # 如果 PJSIP 代码就是整个仓库内容
          elif [ -f "$GITHUB_WORKSPACE/configure-android" ]; then
            echo "Using PJSIP from repository root"
            mkdir -p $GITHUB_WORKSPACE/pjproject
            cp -r $GITHUB_WORKSPACE/* $GITHUB_WORKSPACE/pjproject/
          # 如果找不到 PJSIP 代码，则从官方仓库克隆
          else
            echo "PJSIP code not found in repository, cloning from official repo"
            git clone -b ${PJSIP_VERSION} --depth 1 https://github.com/pjsip/pjproject.git
          fi
          cd $GITHUB_WORKSPACE/pjproject
          
          # 检查是否需要生成配置文件
          if [ ! -f "configure" ]; then
            echo "Running autoconf to generate configure script"
            autoreconf -i
          fi
          
          # 确保 configure-android 可执行
          chmod +x ./configure-android
          
          # 清理之前的构建
          make distclean || true
          
          # 为两种架构构建 PJSIP
          for ABI in armeabi-v7a arm64-v8a; do
            echo "Building PJSIP for $ABI"
            export TARGET_ABI="$ABI"
            
            # 设置正确的 API 级别
            if [[ "$ABI" == "armeabi-v7a" ]]; then
              API_LEVEL=19
            else
              API_LEVEL=21
            fi
            
            export OPENSSL_DIR=$GITHUB_WORKSPACE/output/openssl/$ABI
            export OPENH264_DIR=$GITHUB_WORKSPACE/output/openh264/$ABI
            
            # 配置 PJSIP 构建环境
            export LDFLAGS="-L$OPENSSL_DIR/lib -L$OPENH264_DIR/lib"
            export CFLAGS="-I$OPENSSL_DIR/include -I$OPENH264_DIR/include"
            export CPPFLAGS="-I$OPENSSL_DIR/include -I$OPENH264_DIR/include"
            
            # 确保PKG_CONFIG_PATH包含openh264.pc的路径
            export PKG_CONFIG_PATH="$OPENH264_DIR/lib/pkgconfig:$PKG_CONFIG_PATH"
            
            # 设置额外的环境变量帮助找到OpenH264
            export OPENH264_CFLAGS="-I$OPENH264_DIR/include"
            export OPENH264_LIBS="-L$OPENH264_DIR/lib -lopenh264"
            
            # 显示环境变量
            echo "环境变量设置:"
            echo "OPENSSL_DIR=$OPENSSL_DIR"
            echo "OPENH264_DIR=$OPENH264_DIR"
            echo "LDFLAGS=$LDFLAGS"
            echo "CFLAGS=$CFLAGS"
            echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH"
            echo "OPENH264_CFLAGS=$OPENH264_CFLAGS"
            echo "OPENH264_LIBS=$OPENH264_LIBS"
            
            export APP_PLATFORM=android-$API_LEVEL
            ./configure-android \
              --use-ndk-cflags \
              --with-ssl=$OPENSSL_DIR \
              --with-openh264=$OPENH264_DIR \
              --disable-android-mediacodec
            
            # 检查配置是否成功
            if [ $? -ne 0 ]; then
              echo "配置失败，尝试禁用更多功能重新配置..."
              ./configure-android \
                --use-ndk-cflags \
                --with-ssl=$OPENSSL_DIR \
                --with-openh264=$OPENH264_DIR \
                --disable-android-mediacodec \
                --disable-libwebrtc
                
              if [ $? -ne 0 ]; then
                echo "配置仍然失败，退出构建"
                exit 1
              fi
            fi
            
            # 编译PJSIP
            echo "开始编译 PJSIP for $ABI..."
            make dep && make
            
            # 如果编译失败，显示最后100行日志
            if [ $? -ne 0 ]; then
              echo "PJSIP编译失败，显示最后的编译日志:"
              find . -name "*.log" -exec tail -n 100 {} \;
              exit 1
            fi
            
            # 复制编译好的库文件到输出目录
            find . -name "*.so" -exec cp {} $GITHUB_WORKSPACE/output/pjsip/$ABI/ \; || echo "没有找到.so文件"
          done
          
          echo "PJSIP库构建完成，现在开始构建PJSUA2 Java接口"
      
      - name: Build PJSUA2 Java interface
        run: |
          cd $GITHUB_WORKSPACE/pjproject
          
          # 设置JAVA_HOME环境变量
          export JAVA_HOME=${JAVA_HOME_17_X64}
          echo "JAVA_HOME=$JAVA_HOME"
          
          # 检查javac是否可用
          which javac || echo "javac not found!"
          javac -version || echo "javac command failed!"
          
          # 检查SWIG版本
          swig -version
          
          # 导出必要的环境变量
          export PATH=$JAVA_HOME/bin:$PATH
          
          # 进入SWIG目录
          cd pjsip-apps/src/swig
          
          # 显示目录内容
          ls -la
          
          # 修改Makefile以输出更多编译信息（如果需要）
          if [ -f "Makefile" ]; then
            echo "调整Makefile以输出更多编译信息"
            cp Makefile Makefile.bak
            sed -i 's/^[[:space:]]*@//' Makefile || echo "修改Makefile失败"
          fi
          
          # 编译SWIG接口
          echo "开始构建PJSUA2 Java接口..."
          make
          
          if [ $? -ne 0 ]; then
            echo "SWIG构建失败!"
            echo "显示构建日志:"
            find . -name "*.log" -exec cat {} \;
            exit 1
          fi
          
          # 检查生成的文件
          echo "检查生成的Java接口文件:"
          find . -name "*.java" | grep -i pjsua2
          
          # 检查生成的libpjsua2.so文件
          echo "检查生成的libpjsua2.so文件:"
          LIBPJSUA2_PATHS=$(find . -name "libpjsua2.so")
          echo "$LIBPJSUA2_PATHS" || echo "未找到libpjsua2.so文件"
          
          # 复制Java文件，保持原目录结构
          echo "复制Java文件，保持原目录结构..."
          # 首先确保目标目录存在
          mkdir -p $GITHUB_WORKSPACE/output/pjsua2/java

          # 查找所有Java文件的根目录
          JAVA_SRC_DIR=$(find . -name "*.java" | grep -i pjsua2 | head -1 | xargs dirname)
          if [ -n "$JAVA_SRC_DIR" ]; then
          echo "找到Java文件的根目录: $JAVA_SRC_DIR"
          # 确定源目录
          SOURCE_DIR=$(cd $JAVA_SRC_DIR/../.. && pwd)
          echo "Java源目录: $SOURCE_DIR"
            
          # 复制整个org目录结构
          if [ -d "$SOURCE_DIR/org" ]; then
              echo "复制org目录到输出位置..."
              cp -r $SOURCE_DIR/org $GITHUB_WORKSPACE/output/pjsua2/java/
          else
              echo "在 $SOURCE_DIR 中未找到org目录"
                
              # 如果没有找到org目录，尝试按文件复制
              echo "尝试单独复制Java文件..."
              find . -name "*.java" | while read file; do
              # 获取文件相对路径
              REL_PATH=$(echo $file | grep -o 'org/.*')
              if [ -n "$REL_PATH" ]; then
                  # 创建目标目录
                  TARGET_DIR=$(dirname "$GITHUB_WORKSPACE/output/pjsua2/java/$REL_PATH")
                  mkdir -p $TARGET_DIR
                  # 复制文件
                  cp $file "$GITHUB_WORKSPACE/output/pjsua2/java/$REL_PATH"
              else
                  echo "无法确定 $file 的相对路径，直接复制到pjsua2目录"
                  cp $file $GITHUB_WORKSPACE/output/pjsua2/java/org/pjsip/pjsua2/
              fi
              done
          fi
          else
          echo "未找到任何Java文件"
          fi
          
          # 复制库文件
          for ABI in armeabi-v7a arm64-v8a; do
            # 查找并复制libpjsua2.so文件
            PJSUA2_SO=$(find $GITHUB_WORKSPACE/pjproject -name "libpjsua2.so" | head -1)
            if [ -f "$PJSUA2_SO" ]; then
              echo "找到libpjsua2.so: $PJSUA2_SO"
              
              # 复制libpjsua2.so到jniLibs目录
              cp "$PJSUA2_SO" $GITHUB_WORKSPACE/output/pjsua2/jniLibs/$ABI/
              
              # 尝试查找libc++_shared.so
              LIBCPP_PATH=$(find ${ANDROID_NDK_HOME} -name "libc++_shared.so" | grep "$ABI" | head -1)
              if [ -f "$LIBCPP_PATH" ]; then
                echo "找到libc++_shared.so: $LIBCPP_PATH"
                cp "$LIBCPP_PATH" $GITHUB_WORKSPACE/output/pjsua2/jniLibs/$ABI/
              else
                echo "找不到$ABI架构的libc++_shared.so"
              fi
            else
              echo "未找到libpjsua2.so文件"
            fi
          done
          
          # 验证所有输出
          echo "最终PJSIP输出目录内容:"
          find $GITHUB_WORKSPACE/output/pjsip -type f -name "*.so" | sort
          
          echo "最终PJSUA2输出目录内容:"
          find $GITHUB_WORKSPACE/output/pjsua2 -type f | sort
          
          echo "PJSUA2 Java接口构建完成"
          
      - name: Archive PJSIP artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pjsip-android-libs
          path: ${{ github.workspace }}/output/pjsip
          if-no-files-found: warn
          retention-days: 7
          
      - name: Archive PJSUA2 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pjsua2-java-interface
          path: ${{ github.workspace }}/output/pjsua2
          if-no-files-found: warn
          retention-days: 7
          
      - name: Archive OpenSSL artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openssl-android-libs
          path: ${{ github.workspace }}/output/openssl
          if-no-files-found: warn
          retention-days: 7
          
      - name: Archive OpenH264 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openh264-android-libs
          path: ${{ github.workspace }}/output/openh264
          if-no-files-found: warn
          retention-days: 7