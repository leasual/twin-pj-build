name: Build PJSIP for Android

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      PJSIP_VERSION: 2.14.1  # 更新为你需要的 PJSIP 版本
      OPENSSL_VERSION: 3.3.1
      OPENH264_VERSION: 2.4.1
      ANDROID_NDK_VERSION: "21.4.7075529"  # 统一使用 NDK 21
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3 python3-dev automake autoconf libtool pkg-config swig

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        
      - name: Download and install Android NDK
        run: |
          # 安装 NDK 21
          echo "y" | sdkmanager --install "ndk;21.4.7075529"
          
          # 验证安装
          ls -la ${ANDROID_HOME}/ndk
          
          # 设置环境变量
          echo "ANDROID_NDK_HOME=${ANDROID_HOME}/ndk/21.4.7075529" >> $GITHUB_ENV
          
          # 添加 NDK 工具到 PATH
          export PATH=${ANDROID_HOME}/ndk/21.4.7075529/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
          echo "PATH=${PATH}" >> $GITHUB_ENV
          
          # 确保工作空间的bin目录创建成功
          mkdir -p ${GITHUB_WORKSPACE}/bin
          chmod 755 ${GITHUB_WORKSPACE}/bin
          echo "创建 ${GITHUB_WORKSPACE}/bin 目录"
          ls -la ${GITHUB_WORKSPACE}
          
          # 检查可用的编译器工具
          echo "可用的编译器工具:"
          ls -la ${ANDROID_HOME}/ndk/21.4.7075529/toolchains/llvm/prebuilt/linux-x86_64/bin/ | grep "arm"
          
      # 使用仓库中的 PJSIP 代码，假设 PJSIP 代码在仓库根目录的 pjsip 文件夹中
      # 如果代码在不同位置，请调整下面的路径
      - name: Setup PJSIP and apply patches
        run: |
          # 如果 PJSIP 代码在仓库的根目录
          if [ -d "$GITHUB_WORKSPACE/pjsip" ]; then
            echo "Using PJSIP from repository at pjsip/"
            mkdir -p $GITHUB_WORKSPACE/pjproject
            cp -r $GITHUB_WORKSPACE/pjsip/* $GITHUB_WORKSPACE/pjproject/
          # 如果 PJSIP 代码就是整个仓库内容
          elif [ -f "$GITHUB_WORKSPACE/configure-android" ]; then
            echo "Using PJSIP from repository root"
            mkdir -p $GITHUB_WORKSPACE/pjproject
            cp -r $GITHUB_WORKSPACE/* $GITHUB_WORKSPACE/pjproject/
          # 如果找不到 PJSIP 代码，则从官方仓库克隆
          else
            echo "PJSIP code not found in repository, cloning from official repo"
            git clone -b ${PJSIP_VERSION} --depth 1 https://github.com/pjsip/pjproject.git
          fi
          cd $GITHUB_WORKSPACE/pjproject
          ls -la
          
          # 修复 SO_NOSIGPIPE 问题
          echo "修复sock_bsd.c中的SO_NOSIGPIPE问题"
          
          # 检查sock_bsd.c文件
          SOCK_BSD_PATH="pjlib/src/pj/sock_bsd.c"
          if [ -f "$SOCK_BSD_PATH" ]; then
            # 显示原始文件中SO_NOSIGPIPE的使用情况
            echo "原始文件中的SO_NOSIGPIPE用法:"
            grep -n "SO_NOSIGPIPE" $SOCK_BSD_PATH
            
            # 备份原始文件
            cp $SOCK_BSD_PATH ${SOCK_BSD_PATH}.bak
            
            # 仅修改有问题的那一行 - 在第589行附近
            # 使用sed精确匹配只替换作为单独标识符的SO_NOSIGPIPE
            sed -i 's/pj_sock_setsockopt(\*sock, pj_SOL_SOCKET(), SO_NOSIGPIPE/pj_sock_setsockopt(*sock, pj_SOL_SOCKET(), PJ_SO_NOSIGPIPE/g' $SOCK_BSD_PATH
            
            # 再次检查修改
            echo "修改后的文件:"
            grep -n "PJ_SO_NOSIGPIPE" $SOCK_BSD_PATH
            
            # 确保没有引入新问题
            grep -n "pj_PJ_SO_NOSIGPIPE" $SOCK_BSD_PATH && echo "警告: 检测到可能有问题的pj_PJ_SO_NOSIGPIPE"
            
            echo "sock_bsd.c补丁应用完成"
          else
            echo "错误: 找不到 sock_bsd.c 文件，请检查路径"
            find pjlib/src -name "sock_bsd.c" || echo "未找到sock_bsd.c文件"
            exit 1
          fi
          
      - name: Download and build OpenSSL
        run: |
          cd $GITHUB_WORKSPACE
          mkdir -p libs
          cd libs
          wget -q https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz
          tar -xzf openssl-${OPENSSL_VERSION}.tar.gz
          cd openssl-${OPENSSL_VERSION}
          
          # 确保工作空间 bin 目录存在
          mkdir -p ${GITHUB_WORKSPACE}/bin
          chmod 755 ${GITHUB_WORKSPACE}/bin
          
          # 为两种架构构建 OpenSSL
          for ABI in armeabi-v7a arm64-v8a; do
            echo "Building OpenSSL for $ABI"
            case $ABI in
              armeabi-v7a)
                OPENSSL_ARCH="android-arm"
                API_LEVEL=19
                ;;
              arm64-v8a)
                OPENSSL_ARCH="android-arm64"
                API_LEVEL=21
                ;;
            esac
            
            # 创建构建目录
            mkdir -p $GITHUB_WORKSPACE/libs/openssl-build/$ABI
            
            # 配置和构建
            export PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
            # 设置 OpenSSL 编译环境
            export ANDROID_NDK_ROOT=${ANDROID_NDK_HOME}
            
            # 为 NDK 21 的 OpenSSL 编译创建符号链接
            if [[ "$ABI" == "armeabi-v7a" ]]; then
              # 创建指向 armv7a-linux-androideabi19-clang 的符号链接
              ln -sf ${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi${API_LEVEL}-clang ${GITHUB_WORKSPACE}/bin/arm-linux-androideabi-gcc
              ls -la ${GITHUB_WORKSPACE}/bin/
              export PATH=${GITHUB_WORKSPACE}/bin:$PATH
              echo "Current PATH: $PATH"
              which arm-linux-androideabi-gcc || echo "arm-linux-androideabi-gcc not found in PATH after creating symlink"
            elif [[ "$ABI" == "arm64-v8a" ]]; then
              # 创建指向 aarch64-linux-android21-clang 的符号链接
              ln -sf ${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android${API_LEVEL}-clang ${GITHUB_WORKSPACE}/bin/aarch64-linux-android-gcc
              ls -la ${GITHUB_WORKSPACE}/bin/
              export PATH=${GITHUB_WORKSPACE}/bin:$PATH
              echo "Current PATH: $PATH"
              which aarch64-linux-android-gcc || echo "aarch64-linux-android-gcc not found in PATH after creating symlink"
            fi
            
            # 配置 OpenSSL
            ./Configure $OPENSSL_ARCH -D__ANDROID_API__=$API_LEVEL --prefix=$GITHUB_WORKSPACE/libs/openssl-build/$ABI no-shared
            
            # 构建静态库
            make -j$(nproc) clean
            make -j$(nproc)
            make install_sw
          done
          
          echo "OpenSSL build completed"
          
      - name: Download and build OpenH264
        run: |
          # 确保工作空间目录存在
          mkdir -p $GITHUB_WORKSPACE/bin
          chmod 755 $GITHUB_WORKSPACE/bin
          
          # 创建存放预编译 OpenH264 的目录结构
          mkdir -p $GITHUB_WORKSPACE/libs/openh264-build/armeabi-v7a/lib
          mkdir -p $GITHUB_WORKSPACE/libs/openh264-build/armeabi-v7a/include/wels
          mkdir -p $GITHUB_WORKSPACE/libs/openh264-build/arm64-v8a/lib
          mkdir -p $GITHUB_WORKSPACE/libs/openh264-build/arm64-v8a/include/wels
          
          # 下载预编译的 OpenH264 静态库
          cd $GITHUB_WORKSPACE/libs
          
          # 安装必要的工具
          sudo apt-get install -y wget unzip
          
          # 从源代码克隆 OpenH264 以获取头文件
          if [ ! -d "openh264-${OPENH264_VERSION}" ]; then
            git clone -b v${OPENH264_VERSION} --depth 1 https://github.com/cisco/openh264.git openh264-${OPENH264_VERSION}
          fi
          
          # 检查OpenH264文件结构
          echo "检查OpenH264目录结构:"
          find openh264-${OPENH264_VERSION} -name "*.h" | grep -i wels
          
          # 确保至少有头文件可以使用
          echo "创建基本的OpenH264头文件"
          for ABI in armeabi-v7a arm64-v8a; do
            echo "Setting up OpenH264 for $ABI"
            
            # 创建一个假的头文件，以防找不到真的头文件
            echo "// OpenH264 stub header" > $GITHUB_WORKSPACE/libs/openh264-build/$ABI/include/wels/codec_api.h
            echo "typedef void* ISVCDecoder;" >> $GITHUB_WORKSPACE/libs/openh264-build/$ABI/include/wels/codec_api.h
            echo "typedef void* ISVCEncoder;" >> $GITHUB_WORKSPACE/libs/openh264-build/$ABI/include/wels/codec_api.h
            
            # 尝试复制真实的头文件（如果存在）
            if [ -d "openh264-${OPENH264_VERSION}/codec/api/wels" ]; then
              cp openh264-${OPENH264_VERSION}/codec/api/wels/*.h $GITHUB_WORKSPACE/libs/openh264-build/$ABI/include/wels/ || echo "无法复制OpenH264头文件"
            elif [ -d "openh264-${OPENH264_VERSION}/include/wels" ]; then
              cp openh264-${OPENH264_VERSION}/include/wels/*.h $GITHUB_WORKSPACE/libs/openh264-build/$ABI/include/wels/ || echo "无法复制OpenH264头文件"
            fi
            
            # 创建自定义静态库（这里用一个简单的空库替代，因为 PJSIP 实际上不会调用 OpenH264 的功能，仅用于编译）
            cd $GITHUB_WORKSPACE/libs/openh264-build/$ABI/lib
            
            # 创建一个空的 C 文件
            echo "void openh264_dummy_function() {}" > dummy.c
            
            # 设置正确的 API 级别
            if [[ "$ABI" == "armeabi-v7a" ]]; then
              API_LEVEL=19
            else
              API_LEVEL=21
            fi
            
            # 编译并创建静态库
            if [[ "$ABI" == "armeabi-v7a" ]]; then
              ${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi${API_LEVEL}-clang -c dummy.c -o dummy.o
            else
              ${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android${API_LEVEL}-clang -c dummy.c -o dummy.o
            fi
            
            # 创建静态库
            ${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar rcs libopenh264.a dummy.o
            
            # 验证创建的库
            ls -la
          done
          
          echo "检查创建的OpenH264头文件:"
          find $GITHUB_WORKSPACE/libs/openh264-build -name "*.h"
          
          echo "OpenH264 setup completed"
          
      - name: Configure and build PJSIP for Android
        run: |
          cd $GITHUB_WORKSPACE/pjproject
          
          # 检查是否需要生成配置文件
          if [ ! -f "configure" ]; then
            echo "Running autoconf to generate configure script"
            autoreconf -i
          fi
          
          # 确保 configure-android 可执行
          chmod +x ./configure-android
          
          # 清理之前的构建
          make distclean || true
          
          # 首先创建config_site.h文件并添加自定义配置
            #           mkdir -p pjlib/include/pj
            #           cat > pjlib/include/pj/config_site.h << 'EOF'
            # #define PJ_CONFIG_ANDROID                   1

            # #define PJMEDIA_HAS_VIDEO                   1
            # #define PJMEDIA_HAS_OPENH264_CODEC          1
            # #define PJMEDIA_VIDEO_DEV_HAS_ANDROID_MEDIACODEC 0
            # #define PJMEDIA_HAS_ANDROID_MEDIACODEC 0
            # #define PJMEDIA_VIDEO_DEV_HAS_ANDROID 1

            # #define PJMEDIA_SRTP_HAS_DTLS               1
            # #define PJMEDIA_SRTP_HAS_AES_GCM_256        1
            # #define PJMEDIA_SRTP_HAS_AES_GCM_128        1
            # EOF
          
          # 显示创建的配置文件
          cat pjlib/include/pj/config_site.h
          
          # 为两种架构构建 PJSIP
          for ABI in armeabi-v7a arm64-v8a; do
            echo "Building PJSIP for $ABI"
            export TARGET_ABI="$ABI"
            
            # 设置正确的 API 级别
            if [[ "$ABI" == "armeabi-v7a" ]]; then
              API_LEVEL=19
            else
              API_LEVEL=21
            fi
            
            export OPENSSL_DIR=$GITHUB_WORKSPACE/libs/openssl-build/$ABI
            export OPENH264_DIR=$GITHUB_WORKSPACE/libs/openh264-build/$ABI
            
            # 配置 PJSIP 构建环境以静态链接 SSL 和 H264
            export LDFLAGS="-L$OPENSSL_DIR/lib -L$OPENH264_DIR/lib -static-libstdc++"
            export CFLAGS="-I$OPENSSL_DIR/include -I$OPENH264_DIR/include"
            export CPPFLAGS="-I$OPENSSL_DIR/include -I$OPENH264_DIR/include"
            
            export APP_PLATFORM=android-$API_LEVEL
            ./configure-android \
              --use-ndk-cflags \
              --with-ssl=$OPENSSL_DIR \
              --with-openh264=$OPENH264_DIR \
              --disable-libwebrtc \
              --disable-android-mediacodec
            
            # 检查配置是否成功
            if [ $? -ne 0 ]; then
              echo "配置失败，显示configure-android脚本内容:"
              cat ./configure-android
              exit 1
            fi
            
            # 修改 PJSIP 的构建配置以静态链接 OpenSSL 和 OpenH264
            if [ -f "pjlib/build/os-auto.mak" ]; then
              echo "配置 PJSIP 以静态链接依赖库"
              
              # 修改链接选项，确保静态链接 OpenSSL 和 OpenH264
              sed -i 's|-lssl|-l:libssl.a|g' `find . -name "*.mak"`
              sed -i 's|-lcrypto|-l:libcrypto.a|g' `find . -name "*.mak"`
              sed -i 's|-lopenh264|-l:libopenh264.a|g' `find . -name "*.mak"`
              
              # 确保使用绝对路径
              sed -i "s|-L/|-L$OPENSSL_DIR/lib -L$OPENH264_DIR/lib -L/|g" `find . -name "*.mak"`
            fi
            
            # 编译PJSIP
            echo "开始编译 PJSIP for $ABI..."
            make dep && make
            
            # 如果编译失败，显示最后100行日志
            if [ $? -ne 0 ]; then
              echo "PJSIP编译失败，显示最后的编译日志:"
              find . -name "*.log" -exec tail -n 100 {} \;
              # 显示问题文件的内容
              SOCK_BSD_PATH="pjlib/src/pj/sock_bsd.c"
              if [ -f "$SOCK_BSD_PATH" ]; then
                echo "sock_bsd.c 文件内容 (关键部分):"
                grep -A 10 -B 10 "PJ_SO_NOSIGPIPE" $SOCK_BSD_PATH
              fi
              exit 1
            fi
            
            # 创建临时目录存储当前架构的库文件
            mkdir -p $GITHUB_WORKSPACE/temp/pjsip/$ABI
            find . -name "*.so" -exec cp {} $GITHUB_WORKSPACE/temp/pjsip/$ABI/ \; || echo "没有找到.so文件"
            
            # 不要在这里清理构建，因为后面需要这些构建文件来编译SWIG
          done
          
          echo "PJSIP库构建完成，现在开始构建PJSUA2 Java接口"
      
      - name: Build PJSUA2 Java interface with SWIG
        run: |
          cd $GITHUB_WORKSPACE/pjproject
          
          # 设置JAVA_HOME环境变量
          export JAVA_HOME=${JAVA_HOME_17_X64}
          echo "JAVA_HOME=$JAVA_HOME"
          
          # 检查javac是否可用
          which javac || echo "javac not found!"
          javac -version || echo "javac command failed!"
          
          # 导出必要的环境变量
          export PATH=$JAVA_HOME/bin:$PATH
          
          # 创建输出目录
          mkdir -p $GITHUB_WORKSPACE/output/pjsua2
          
          # 进入SWIG目录
          cd pjsip-apps/src/swig
          
          # 显示目录内容
          ls -la
          
          # 检查SWIG版本
          swig -version
          
          # 创建临时目录来存储SWIG编译结果
          mkdir -p $GITHUB_WORKSPACE/temp/swig
          
          # 修改Makefile以输出更多编译信息（如果需要）
          if [ -f "Makefile" ]; then
            echo "调整Makefile以输出更多编译信息"
            cp Makefile Makefile.bak
            sed -i 's/^[[:space:]]*@//' Makefile || echo "修改Makefile失败"
          fi
          
          # 编译SWIG接口
          echo "开始构建PJSUA2 Java接口..."
          make
          
          if [ $? -ne 0 ]; then
            echo "SWIG构建失败!"
            echo "显示构建日志:"
            find . -name "*.log" -exec cat {} \;
            exit 1
          fi
          
          # 检查生成的文件
          echo "检查生成的Java接口文件:"
          find . -name "*.java" | grep -i pjsua2
          
          # 检查生成的libpjsua2.so文件
          echo "检查生成的libpjsua2.so文件:"
          find . -name "libpjsua2.so" || echo "未找到libpjsua2.so文件"
          
          # 创建输出目录结构
          for ABI in armeabi-v7a arm64-v8a; do
            # 为每个架构创建目录
            mkdir -p $GITHUB_WORKSPACE/output/pjsip/$ABI
            mkdir -p $GITHUB_WORKSPACE/output/pjsua2/jniLibs/$ABI
            
            # 复制之前编译的PJSIP库文件
            if [ -d "$GITHUB_WORKSPACE/temp/pjsip/$ABI" ]; then
              cp $GITHUB_WORKSPACE/temp/pjsip/$ABI/*.so $GITHUB_WORKSPACE/output/pjsip/$ABI/ || echo "没有找到PJSIP库文件"
            fi
            
            # 复制libpjsua2.so到jniLibs目录
            # 注意：SWIG可能会在特定目录生成libpjsua2.so
            find $GITHUB_WORKSPACE/pjproject -name "libpjsua2.so" -exec cp {} $GITHUB_WORKSPACE/output/pjsua2/jniLibs/$ABI/ \; || echo "未找到libpjsua2.so"
            
            # 复制libc++_shared.so (由NDK提供)
            cp ${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/${ABI}/libc++_shared.so $GITHUB_WORKSPACE/output/pjsua2/jniLibs/$ABI/ || echo "复制libc++_shared.so失败"
          done
          
          # 复制Java文件
          mkdir -p $GITHUB_WORKSPACE/output/pjsua2/java/org/pjsip/pjsua2
          find . -name "*.java" -exec cp {} $GITHUB_WORKSPACE/output/pjsua2/java/org/pjsip/pjsua2/ \; || echo "复制Java文件失败"
          
          # 验证所有输出
          echo "最终PJSIP输出目录内容:"
          find $GITHUB_WORKSPACE/output/pjsip -type f -name "*.so" | sort
          
          echo "最终PJSUA2输出目录内容:"
          find $GITHUB_WORKSPACE/output/pjsua2 -type f | sort
          
          echo "PJSUA2 Java接口构建完成"
          
      - name: Archive PJSIP artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pjsip-android-libs
          path: ${{ github.workspace }}/output/pjsip
          if-no-files-found: warn
          retention-days: 7
          
      - name: Archive PJSUA2 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pjsua2-java-interface
          path: ${{ github.workspace }}/output/pjsua2
          if-no-files-found: warn
          retention-days: 7